from os import listdir
from os.path import isfile, join

in_dir = "/Users/karthik/hpc_downloads/2018.06.26/field"
out_dir = "/Users/karthik/hpc_downloads/test_field"
bed = "/Users/karthik/Documents/code/ivar/data/ZKV_primers.bed"
ref="/Users/karthik/Documents/code/ivar/data/db/ZIKV_PRV.fasta"
primer_csv = "/Users/karthik/Documents/code/ivar/data/ZKV_primers.csv"

# File name format - ZI26a_R1.fastq.gz
lst = listdir(in_dir)
lst.sort()
files = [f for f in lst  if isfile(join(in_dir, f)) and ".fastq.gz" in f]

SAMPLES = []
for i in files:
    SAMPLES.append(i.split("_")[0])
SAMPLES = list(set(SAMPLES))

REPS=["a","b"]

rule all:
    input:
        expand("{out_dir}/masked_variants/{sample}.filtered.tsv", out_dir = out_dir, sample = SAMPLES)

rule filter_variants:
    input:
        expand("{{out_dir}}/masked_variants/{{sample}}_{rep}.tsv", rep=REPS)
    output:
        "{out_dir}/masked_variants/{sample}.filtered.tsv"
    shell:
        "mkdir -p $(dirname {output})/ &&"
        "ivar filtervariants -p {wildcards.out_dir}/masked_variants/{wildcards.sample}.filtered {input}"
rule call_variants_post_removal:
    input:
        "{out_dir}/masked/{sample}_{rep}.masked.sorted.bam",
        "{out_dir}/consensus/{sample}_{rep}.fa"
    output:
        "{out_dir}/masked_variants/{sample}_{rep}.tsv"
    shell:
        "mkdir -p $(dirname {output})/ &&"
        "samtools mpileup -A -d 300000 --reference {input[1]} -Q 0 -F 0 {input[0]} | ivar variants -p {wildcards.out_dir}/masked_variants/{wildcards.sample}_{wildcards.rep} -t 0.03"

rule remove_reads:
    input:
        "{out_dir}/realigned/{sample}_{rep}.realigned.trimmed.sorted.bam",
        "{out_dir}/{sample}_{rep}_masked_primer_indices.txt"
    output:
        "{out_dir}/masked/{sample}_{rep}.masked.sorted.bam"
    shell:
        "mkdir -p $(dirname {output})/ &&"
        "primers=$(cat {input[1]}) &&"
        "ivar removereads -i {input[0]} -p {wildcards.out_dir}/masked/{wildcards.sample}_{wildcards.rep}.masked $primers && "
        "samtools sort -o {output} {wildcards.out_dir}/masked/{wildcards.sample}_{wildcards.rep}.masked.bam && "
        "samtools index {output}"

rule get_masked:
    input:
        "{out_dir}/variants/{sample}.filtered.tsv",
        "{out_dir}/bed/{sample}_{rep}.bed"
    output:
        "{out_dir}/{sample}_{rep}_masked_primer_indices.txt"
    shell:
        "ivar getmasked -i {input[0]} -b {input[1]} > {output}"

rule filter_variants_before_masking:
    input:
        expand("{{out_dir}}/variants/{{sample}}_{rep}.tsv", rep=REPS)
    output:
        "{out_dir}/variants/{sample}.filtered.tsv"
    shell:
        "mkdir -p $(dirname {output})/ &&"
        "ivar filtervariants -p {wildcards.out_dir}/variants/{wildcards.sample}.filtered {input}"

rule call_variants:
    input:
        "{out_dir}/realigned/{sample}_{rep}.realigned.trimmed.sorted.bam",
        "{out_dir}/consensus/{sample}_{rep}.fa"
    output:
        "{out_dir}/variants/{sample}_{rep}.tsv"
    shell:
        "mkdir -p $(dirname {output})/ &&"
        "samtools mpileup -A -d 300000 --reference {input[1]} -Q 0 -F 0 {input[0]} | ivar variants -p {wildcards.out_dir}/variants/{wildcards.sample}_{wildcards.rep} -t 0.03"

rule realigned_trim_primer_quality:
    input:
        "{out_dir}/realigned/{sample}_{rep}.realigned.sorted.bam",
        "{out_dir}/bed/{sample}_{rep}.bed"
    output:
        "{out_dir}/realigned/{sample}_{rep}.realigned.trimmed.sorted.bam",
    shell:
        "mkdir -p $(dirname {output})/ &&"
        "ivar trim -b {input[1]} -p {wildcards.out_dir}/realigned/{wildcards.sample}_{wildcards.rep}.realigned.trimmed -i {input[0]} &&"
        "samtools sort -o {output} {wildcards.out_dir}/realigned/{wildcards.sample}_{wildcards.rep}.realigned.trimmed.bam &&"
        "samtools index {output}"

rule create_bed:
    input:
        "{out_dir}/index/{sample}_{rep}.bwt",
        "{csv}".format(csv = primer_csv)
    output:
        "{out_dir}/bed/{sample}_{rep}.bed"
    shell:
        "mkdir -p $(dirname {output}) && "
        "cut -f 1,2 -d ',' {input[1]} | sed 's/^/>/g' | tr ',' '\n' > {wildcards.out_dir}/bed/{wildcards.sample}_{wildcards.rep}.fa && "
        "~/Documents/bwa/bwa mem -k 5 -T 20 {wildcards.out_dir}/index/{wildcards.sample}_{wildcards.rep} {wildcards.out_dir}/bed/{wildcards.sample}_{wildcards.rep}.fa | samtools view -bS -F 4 -o {wildcards.out_dir}/bed/{wildcards.sample}_{wildcards.rep}.bam && "
        "bedtools bamtobed -i {wildcards.out_dir}/bed/{wildcards.sample}_{wildcards.rep}.bam > {output}"

rule align_to_consensus:
    input:
        "{out_dir}/consensus/{sample}_{rep}.fa",
        expand("{in_dir}/{{sample}}_{{rep}}_R{readno}.fastq.gz", readno = [1,2], in_dir = in_dir)
    output:
        "{out_dir}/realigned/{sample}_{rep}.realigned.sorted.bam",
        "{out_dir}/index/{sample}_{rep}.bwt"
    shell:
        "mkdir -p {wildcards.out_dir}/index/ $(dirname {output[0]}) && "
        "bwa index -p {wildcards.out_dir}/index/{wildcards.sample}_{wildcards.rep} {input[0]} && "
        "bwa mem {wildcards.out_dir}/index/{wildcards.sample}_{wildcards.rep} {input[1]} {input[2]} | samtools view -F 4 -Sb | samtools sort -o {output[0]} &&"
        "samtools index {output[0]}"

rule call_consensus:
    input:
        "{out_dir}/trimmed/{sample}_{rep}.trimmed.sorted.bam"
    output:
        "{out_dir}/consensus/{sample}_{rep}.fa"
    shell:
        "mkdir -p $(dirname {output})/ &&"
        "samtools mpileup -A -d 300000 -Q 0 -F 0 {input[0]}| ivar consensus -p {wildcards.out_dir}/consensus/{wildcards.sample}_{wildcards.rep}"

rule trim_primer_quality:
    input:
        "{out_dir}/aligned/{sample}_{rep}.sorted.bam",
        "{b}".format(b = bed)
    output:
        "{out_dir}/trimmed/{sample}_{rep}.trimmed.sorted.bam"
    shell:
        "mkdir -p {wildcards.out_dir}/trimmed/ && "
        "ivar trim -b {input[1]} -p {wildcards.out_dir}/trimmed/{wildcards.sample}_{wildcards.rep}.trimmed -i {input[0]} &&"
        "samtools sort -o {output} {wildcards.out_dir}/trimmed/{wildcards.sample}_{wildcards.rep}.trimmed.bam &&"
        "samtools index {output}"

rule align_reads:
    input:
        expand("{in_dir}/{{sample}}_{{rep}}_R{num}.fastq.gz", in_dir = in_dir, num=[1,2]),
        "{ref}".format(ref = ref)
    output:
        "{out_dir}/aligned/{sample}_{rep}.sorted.bam"
    shell:
        "mkdir -p $(dirname {output})/ && "
        "bwa mem {ref} {input[0]} {input[1]} | samtools view -F 4 -Sb | samtools sort -o {output} && "
        "samtools index {output}"
